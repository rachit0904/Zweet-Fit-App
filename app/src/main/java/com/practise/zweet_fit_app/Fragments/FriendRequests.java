package com.practise.zweet_fit_app.Fragments;import android.content.Context;import android.content.SharedPreferences;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.airbnb.lottie.LottieAnimationView;import com.practise.zweet_fit_app.Adapters.FriendsCardAdapter;import com.practise.zweet_fit_app.Modals.UsersDataModal;import com.practise.zweet_fit_app.R;import com.practise.zweet_fit_app.Util.Constant;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.util.ArrayList;import java.util.List;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;public class FriendRequests extends Fragment {    RecyclerView requests;    List<UsersDataModal> requestsList=new ArrayList<>();    SharedPreferences pref;    LottieAnimationView frndRequestAnim;    TextView noData;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View view= inflater.inflate(R.layout.fragment_friend_requests, container, false);        pref=getActivity().getSharedPreferences("user data", Context.MODE_PRIVATE);        requests=view.findViewById(R.id.friendRequests);        frndRequestAnim=view.findViewById(R.id.frndRequestAnim);        noData=view.findViewById(R.id.noData);        requests.setHasFixedSize(true);        requests.setLayoutManager(new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,false));        FriendsCardAdapter adapter=new FriendsCardAdapter(getRequests(), requireContext());        requests.setAdapter(adapter);        if(requestsList.isEmpty()){            requests.setVisibility(View.GONE);            frndRequestAnim.setVisibility(View.VISIBLE);            noData.setVisibility(View.VISIBLE);        }else{            requests.setVisibility(View.VISIBLE);            frndRequestAnim.setVisibility(View.GONE);            noData.setVisibility(View.GONE);        }        return view;    }    private List<UsersDataModal> getRequests() {        String url = Constant.ServerUrl+"/select?table=friends";        OkHttpClient client = new OkHttpClient().newBuilder()                .build();        Request request = new Request.Builder()                .url(url)                .method("GET", null)                .addHeader("key", "MyApiKEy")                .build();        try {            Response response = client.newCall(request).execute();            String data = response.body().string();            JSONObject jsonObject = new JSONObject(data);            JSONArray jsonArray = jsonObject.getJSONArray("data");            String uid = pref.getString("id", "");            if (jsonArray.length() > 0) {                for (int i = 0; i < jsonArray.length(); i++) {                    JSONObject obj = jsonArray.getJSONObject(i);                    if ((uid.equals(obj.getString("fid")))                            && obj.getString("status").equals("pending")) {                        UsersDataModal friend = new UsersDataModal();                       friend.setUid(obj.getString("uid"));                        requestsList.add(getRequestData(friend));                    }                }            }        } catch (IOException | JSONException e) {            e.printStackTrace();        }        return requestsList;    }    private UsersDataModal getRequestData(UsersDataModal user) {        user.setIsFriend("no");        user.setCardType("request");        String url = Constant.ServerUrl+"/selectwQuery?table=users&query=uid&value="+ user.getUid();        OkHttpClient client = new OkHttpClient().newBuilder()                .build();        Request request = new Request.Builder()                .url(url)                .method("GET", null)                .addHeader("key", "MyApiKEy")                .build();        try {            Response response = client.newCall(request).execute();            String data = response.body().string();            Log.i("response",data);            JSONObject jsonObject = new JSONObject(data);            JSONArray jsonArray = jsonObject.getJSONArray("data");            if (jsonArray.length() > 0) {                for (int i = 0; i < jsonArray.length(); i++) {                    JSONObject obj = jsonArray.getJSONObject(i);                    user.setName(obj.getString("name"));                    user.setImagePath(obj.getString("dp_url"));                }            }        } catch (JSONException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return user;    }}